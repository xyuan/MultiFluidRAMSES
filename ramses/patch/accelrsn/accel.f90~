!====================================================!
! ACCELERATION OF PARTICLES                          !
!====================================================!
! subroutine sample_radial_profile                   !
! subroutine average_radial_profile                  !
! subroutine diagnose_shocks                         !
! subroutine accelerate_particles                    !
! subroutine back_react                              !
! subroutine amr_step                                !
!====================================================!
! 2009/06/   : acceleration                          !
!        /03 : added diagnose_shocks()               !
!        /04 : linked with blasi_module              !
!        /05 : added [sample/average]_radial_profile !
!        /05 : added back_react()                    !
!        /08 : variable gamma                        !
!        /09 : added accelerate_particles()          !
! 2010/05/17 : use of new function e_kin()           !
!        /18 : separated from amr_step.f90           !
!     /08/26 : version 2 of Blasi module             !
! 2012/04/13 : dk: store the CR pressure             !
! 2012/06/06 : dk: added two angular dim to radial   !
!====================================================!

!###########################################################
!###########################################################
!###########################################################
!###########################################################
subroutine sample_radial_profile(ilevel)
  use amr_commons
  use hydro_commons
  use const
  implicit none
#ifndef WITHOUTMPI
  include 'mpif.h'
#endif
  integer::ilevel
  
  integer::i,ind,icell,iskip,ivar,n_loc,n,info,icpu,n_buff
  integer::iph,ith
  integer,dimension(1:3)::dir_ind
  integer,dimension(:),allocatable::order
  real(dp)::dx,e_kin
  real(dp),dimension(:,:,:,:),allocatable::temp_loc,temp
  real(dp),dimension(:),allocatable::comm_buff
  real(dp),dimension(1:3)::dir=(/1,1,1/)
  real(dp),dimension(0:ores_max,0:ores_max,1:3)::dirs
  
  ! Re-order directions (the ray vector "dir" must have 
  ! non-zero component in the reference direction "dir_ind(1)")
  
  if(dir(1)>0)then
    dir_ind=(/1,2,3/)
  else if(dir(2)>0)then
    dir_ind=(/2,1,3/)
  else if(dir(3)>0)then
    dir_ind=(/3,1,2/)
  else
    if(myid==1)write(*,*)'! invalid ray direction: ',dir
    call clean_stop
  endif


  ! find dirs (centers of the angular cells) according to the parameter 'ores', defined in the namelist
  do ith=0,ores
     do iph=0,ores
        dirs(iph,ith,1) = cos( (iph+0.5)/(ores+1)*0.5*trpi ) * sin( (ith+0.5)/(ores+1)*0.5*trpi )
        dirs(iph,ith,2) = sin( (iph+0.5)/(ores+1)*0.5*trpi ) * sin( (ith+0.5)/(ores+1)*0.5*trpi )
        dirs(iph,ith,3) = cos( (ith+0.5)/(ores+1)*0.5*trpi )
        if(myid==2) then
           write(*,*) iph, ith, ':  directions = ', dirs(iph,ith,1), dirs(iph,ith,2), dirs(iph,ith,3)
        endif
     end do
  end do
  ! all the directions should be positive here, thus dir_ind=(/1,2,3/) does not change

  
  ! Gather all grids on the ray !!! 

  dx=0.5D0**ilevel*boxlen
  allocate(temp_loc(1:2**ilevel,0:ores,0:ores,0:nvar))
  n_loc=0
  do ind=1,twotondim
    iskip=ncoarse+(ind-1)*ngridmax
    do i=1,active(ilevel)%ngrid
      icell=active(ilevel)%igrid(i)+iskip

      do ith=0,ores
         do iph=0,ores

            if(abs((position(icell,dir_ind(1))/dirs(iph,ith,dir_ind(1)))*dirs(iph,ith,dir_ind(2))- & 
                    position(icell,dir_ind(2)))<0.9*dx.and. &
               abs((position(icell,dir_ind(1))/dirs(iph,ith,dir_ind(1)))*dirs(iph,ith,dir_ind(3))- &
                    position(icell,dir_ind(3)))<0.9*dx)then
               n_loc = n_loc+1
               temp_loc(n_loc,iph,ith,0) = position(icell,0)  ! r 

               temp_loc(n_loc,iph,ith,1) = uold(icell,1)
               do ivar=2,4  !! velocities 
                  temp_loc(n_loc,iph,ith,ivar) = uold(icell,ivar)/uold(icell,1) + H_th_new * position(icell,ivar-1)
               enddo
#ifdef VAR_G
               temp_loc(n_loc,iph,ith,5) = (uold(icell,1)/uold(icell,VAR_G)) &
                           * (uold(icell,5)-e_kin(uold(icell,1),uold(icell,2:ndim+1),position(icell,1:ndim)))
#else
               temp_loc(n_loc,iph,ith,5) = (gamma-1d0)                      &
                           * (uold(icell,5)-e_kin(uold(icell,1),uold(icell,2:ndim+1),position(icell,1:ndim)))
#endif
               do ivar=6,nvar
                  temp_loc(n_loc,iph,ith,ivar) = uold(icell,ivar)/uold(icell,1)
               enddo
            endif

         end do
      end do

    end do
  end do
  
  call MPI_ALLREDUCE(n_loc,n,1,MPI_INTEGER,MPI_SUM,&
      &MPI_COMM_WORLD,info)
  !write(*,*)n_loc,'/',n,' cells collected by proc ',myid
  allocate(temp(1:n,0:ores,0:ores,0:nvar))

  do ith=0,ores
     do iph=0,ores
          
        do ivar=0,nvar
           icell=1
           do icpu=1,ncpu
              if(myid==icpu)n_buff=n_loc
              call MPI_BCAST(n_buff,1,MPI_INTEGER,icpu-1,MPI_COMM_WORLD,info)
              allocate(comm_buff(n_buff))
              if(myid==icpu)comm_buff=temp_loc(1:n_loc,iph,ith,ivar)
              call MPI_BCAST(comm_buff,n_buff,MPI_DOUBLE_PRECISION,icpu-1,MPI_COMM_WORLD,info)
              temp(icell:icell+n_buff-1,iph,ith,ivar)=comm_buff
              icell=icell+n_buff
              deallocate(comm_buff)
           enddo
        enddo

     enddo
  enddo
  
  ! Go back to physical quantities
  
  do ivar=2,4
    temp(:,:,:,ivar) = temp(:,:,:,ivar) + H_th_new*temp(:,:,:,0)
  enddo
  if(omega==2)then
    temp(:,:,:,1  ) = temp(:,:,:,1  )/a_t**3
    temp(:,:,:,2:4) = temp(:,:,:,2:4)/a_t
    temp(:,:,:,5  ) = temp(:,:,:,5  )/a_t**5
  endif
  temp(:,:,:,0) = temp(:,:,:,0)*a_t
  
  ! Re-order grids by radius
  
  if(allocated(radial))deallocate(radial)
  allocate(radial(1:n,0:ores,0:ores,0:nvar))
  allocate(order(1:n))
  radial(1:n,:,:,0) = temp(1:n,:,:,0)

  do ith=0,ores
     do iph=0,ores
        call quick_sort(radial(1:n,iph,ith,0),order(1:n),n)
        do ivar=1,nvar
           radial(1:n,iph,ith,ivar) = temp(order(1:n),iph,ith,ivar)
        enddo
     enddo
  enddo
  
  !if(t_phys>500.0 .and. t_phys<510) then
  !if(myid==2)then
  !   do i=1,n
  !     write(*,"('i = ',I3,' : r = ',F6.4,' : d = ',ES13.6,' , u = ',ES13.6,1x, ES13.6,1x, ES13.6,&
  !     &' , P = ',ES13.6,', ej = ',ES13.6,', g = ',F6.4)") &
  !     i,radial(i,0,0,0),radial(i,0,0,1),radial(i,0,0,2),radial(i,0,0,3),radial(i,0,0,4),radial(i,0,0,5), &
  !       radial(i,0,0,6),radial(i,0,0,7)
  !     write(*,"('i = ',I3,' : r = ',F6.4,' : d = ',ES13.6,' , u = ',ES13.6,1x, ES13.6,1x, ES13.6,&
  !     &' , P = ',ES13.6,', ej = ',ES13.6,', g = ',F6.4)") &
  !     i,radial(i,ores,ores,0),radial(i,ores,ores,1),radial(i,ores,ores,2),radial(i,ores,ores,3),radial(i,ores,ores,4), &
  !       radial(i,ores,ores,5),radial(i,ores,ores,6),radial(i,ores,ores,7)
  !  enddo
  !endif
  !endif
  deallocate(temp_loc)
  deallocate(temp)
  deallocate(order)

end subroutine sample_radial_profile
!###########################################################
!###########################################################
!###########################################################
!###########################################################
subroutine average_radial_profile(ilevel)
  use amr_commons
  use hydro_commons
  use const
  implicit none
#ifndef WITHOUTMPI
  include 'mpif.h'
#endif
  integer::ilevel

  integer::i,ishell,nshells_max,nshells_eff,ind,icell,iskip,ivar,info
  integer::iph,ith
  integer,dimension(:,:,:),allocatable::ncells_loc,ncells
  integer,dimension(:),allocatable::ncells_allsectors
  real(dp)::dx,e_kin
  real(dp),dimension(:,:,:,:),allocatable::temp_loc,temp
  real(dp),dimension(:),allocatable::comm_buffin,comm_buffout
  real(dp),dimension(0:ores_max,0:ores_max,1:3)::dirs
  real(dp),dimension(0:nvar)::radial_tmp

  nshells_max = ceiling(2**ilevel * sqrt(3D0))
  !nshells_max = ceiling(2**ilevel * sqrt(3D0))*ores
  allocate(temp_loc(1:nshells_max,0:ores,0:ores,0:nvar))
  allocate(temp    (1:nshells_max,0:ores,0:ores,0:nvar))
  dx=0.5D0**ilevel*boxlen

  do ith=0,ores
     do iph=0,ores
        do ishell=1,nshells_max ! shell center
           temp_loc(ishell,iph,ith,0) = -0.5*dx + ishell*dx
           temp    (ishell,iph,ith,0) = -0.5*dx + ishell*dx
        enddo
     enddo
  enddo


  ! find dirs (centers of the angular cells) according to the parameter 'ores', defined in the namelist
  do ith=0,ores
     do iph=0,ores
        dirs(iph,ith,1) = cos( (iph+0.5)/(ores+1)*0.5*trpi ) * sin( (ith+0.5)/(ores+1)*0.5*trpi )
        dirs(iph,ith,2) = sin( (iph+0.5)/(ores+1)*0.5*trpi ) * sin( (ith+0.5)/(ores+1)*0.5*trpi )
        dirs(iph,ith,3) = cos( (ith+0.5)/(ores+1)*0.5*trpi )
        !if(myid==2) then
        !    write(*,*) iph, ith, ':  directions = ', dirs(iph,ith,1), dirs(iph,ith,2), dirs(iph,ith,3)
        !endif
                !write(*,*) ' ores, iph, ith, sins'
                !write(*,*)  ores, iph, ith
                !write(*,*)  sin((1.0*iph)/(1.0*ores+1.0)*0.5*trpi),&
                !            sin((1.0*iph+1.0)/(1.0*ores+1.0)*0.5*trpi),&
                !            sin((1.0*ith)/(1.0*ores+1.0)*0.5*trpi),&
                !            sin((1.0*ith+1.0)/(1.0*ores+1.0)*0.5*trpi)


     end do
  end do
  ! all the directions should be positive here, thus dir_ind=(/1,2,3/) does not change

  
  ! Sum by shells over all grids
  
  temp_loc(:,:,:,1:nvar) = 0
  allocate(ncells_loc(1:nshells_max,0:ores,0:ores))
  allocate(ncells    (1:nshells_max,0:ores,0:ores))
  ncells_loc(:,:,:) = 0
  do ind=1,twotondim
    iskip=ncoarse+(ind-1)*ngridmax
    do i=1,active(ilevel)%ngrid
       icell=active(ilevel)%igrid(i)+iskip
       ! separately for each sector
       do ith=0,ores
          do iph=0,ores

            ! we run/select only along the given direction 
            ! if(abs((position(icell,1)/dirs(iph,ith,1))*dirs(iph,ith,2) - position(icell,2))<0.9*dx.and. &
            !    abs((position(icell,1)/dirs(iph,ith,1))*dirs(iph,ith,3) - position(icell,3))<0.9*dx)then

             if( (position(icell,2)/sqrt(position(icell,1)**2 + position(icell,2)**2)>&
                                    sin((1.0*iph)/(1.0*ores+1.0)*0.5*trpi) .and. & 
                  position(icell,2)/sqrt(position(icell,1)**2 + position(icell,2)**2)<&
                                    sin((1.0*iph+1.0)/(1.0*ores+1.0)*0.5*trpi)) .and. &
                 (position(icell,3)/position(icell,0)>sin((1.0*ith)/(1.0*ores+1.0)*0.5*trpi) .and. & 
                  position(icell,3)/position(icell,0)<sin((1.0*ith+1.0)/(1.0*ores+1.0)*0.5*trpi)) )then

!                 (position(icell,3)/sqrt(position(icell,1)**2 + position(icell,2)**2 + position(icell,3)**2)>&
!                                         sin((1.0*ith)/(1.0*ores+1.0)*0.5*trpi) .and. & 
!                  position(icell,3)/sqrt(position(icell,1)**2 + position(icell,2)**2 + position(icell,3)**2)<&
!                                         sin((1.0*ith+1.0)/(1.0*ores+1.0)*0.5*trpi)) )then

                ! write(*,*) ' dx=', dx, '<', abs((position(icell,1)/dirs(iph,ith,1))*dirs(iph,ith,2) - position(icell,2))

                ! in which shell are we ?
                ishell = 1
                do while(position(icell,0)>temp_loc(ishell,iph,ith,0)+0.5*dx)
                   ishell = ishell+1
                enddo
                ncells_loc(ishell,iph,ith) = ncells_loc(ishell,iph,ith)+1

                !write(*,*)'cell ',icell,' of proc ',myid,' is centered around position ',position(icell,0),&
                !          ' and thus belongs to shell ',ishell,' of radius ',temp_loc(ishell,0,0,0)
                ! sum primitive variables

                temp_loc(ishell,iph,ith,1) = temp_loc(ishell,iph,ith,1) + uold(icell,1)
                do ivar=2,4 ! {u,v,w}
                   temp_loc(ishell,iph,ith,ivar) = temp_loc(ishell,iph,ith,ivar) + uold(icell,ivar)/uold(icell,1) 
                                                   !+ H_th_new * position(icell,ivar-1)
                enddo
#ifdef VAR_G
                temp_loc(ishell,iph,ith,5) = temp_loc(ishell,iph,ith,5) + (uold(icell,1)/uold(icell,VAR_G)) &
                             * (uold(icell,5)-e_kin(uold(icell,1),uold(icell,2:ndim+1),position(icell,1:ndim)))
#else
                temp_loc(ishell,iph,ith,5) = temp_loc(ishell,iph,ith,5) + (gamma-1d0)                      &
                             * (uold(icell,5)-e_kin(uold(icell,1),uold(icell,2:ndim+1),position(icell,1:ndim)))
#endif
                do ivar=6,nvar ! other varaibles 
                   temp_loc(ishell,iph,ith,ivar) = temp_loc(ishell,iph,ith,ivar) + uold(icell,ivar)/uold(icell,1)
                enddo

             endif

          enddo
       enddo

    end do
  end do
  
  ! Combine all shells on all processors
  
  allocate(comm_buffin (nshells_max)) ! recalculate nshells_max -> nshells_max*ores*ores
  allocate(comm_buffout(nshells_max))

  do ith=0,ores
     do iph=0,ores
        comm_buffin = ncells_loc(1:nshells_max,iph,ith)
        call MPI_ALLREDUCE(comm_buffin,comm_buffout,nshells_max,MPI_DOUBLE_PRECISION,MPI_SUM,&
                           &MPI_COMM_WORLD,info)
        ncells(1:nshells_max,iph,ith) = comm_buffout

        do ivar=1,nvar
           comm_buffin = temp_loc(1:nshells_max,iph,ith,ivar)
           call MPI_ALLREDUCE(comm_buffin,comm_buffout,nshells_max,MPI_DOUBLE_PRECISION,MPI_SUM,&
                               &MPI_COMM_WORLD,info)
           temp(1:nshells_max,iph,ith,ivar) = comm_buffout
        enddo

        do ishell=1,nshells_max
           !  if (temp(ishell,iph,ith,6)>0.0) write(*,*) ishell, '0: PRESSURE: ', temp(ishell,iph,ith,6), ncells(ishell,iph,ith)
           if(ncells(ishell,iph,ith) > 0) temp(ishell,iph,ith,1:nvar) = temp(ishell,iph,ith,1:nvar) / ncells(ishell,iph,ith)
           !  if (temp(ishell,iph,ith,6)>0.0) write(*,*) ishell, '1: PRESSURE: ', temp(ishell,iph,ith,6), iph, ith
           !if(myid==1)write(*,*)ncells(ishell),' cells averaged in shell ',ishell,' of center ',temp(ishell,iph,ith,0)
        enddo
     enddo
  enddo
  
  ! Go back to physical quantities
  
  do ivar=2,4 ! {u,v,w}
    temp(:,:,:,ivar) = temp(:,:,:,ivar) + H_th_new*temp(:,:,:,0)
  enddo
  if(omega==2)then
    temp(:,:,:,1  ) = temp(:,:,:,1  )/a_t**3  ! den
    temp(:,:,:,2:4) = temp(:,:,:,2:4)/a_t     ! {u,v,w}
    temp(:,:,:,5  ) = temp(:,:,:,5  )/a_t**5  ! gamma
  endif
  temp(:,:,:,0) = temp(:,:,:,0)*a_t

  
  ! Remove unused shells

  if(allocated(ncells_allsectors))deallocate(ncells_allsectors)
  allocate(ncells_allsectors(1:nshells_max))
  nshells_eff = 0
  do ishell=1,nshells_max
     ncells_allsectors(ishell) = 0
     do ith=0,ores
        do iph=0,ores
           !write(*,*) ishell, 'temp PRESSURE: ', temp(ishell,iph,ith,6), iph, ith
           ncells_allsectors(ishell) = ncells_allsectors(ishell) + ncells(ishell,iph,ith)
           !!! if(ncells(ishell,iph,ith) > 0) nshells_eff = nshells_eff+1
        enddo
     enddo
     ! if any of the sectors contains zero cells erase the counter, remove the entire shell !! which is not correct....
    ! do ith=0,ores
    !    do iph=0,ores
    !       if(ncells(ishell,iph,ith) < 1) ncells_allsectors(ishell) = 0
    !    enddo
    ! enddo
     if(ncells_allsectors(ishell) > 0) nshells_eff = nshells_eff+1
  enddo
  if(allocated(radial))deallocate(radial)
  allocate(radial(1:nshells_eff,0:ores,0:ores,0:nvar))
  !write(*,*) 'NSHELLS_EFF=',nshells_eff, ',    NSHELL_MAX=', nshells_max
  i = 1
  do ishell=1,nshells_max
    if(ncells_allsectors(ishell) > 0)then
       ! smooth the data at the same radius with some sectors of zero cells
       radial(i,:,:,:) = temp(ishell,:,:,:)
       do ith=0,ores
          do iph=0,ores
             if (ncells(ishell,iph,ith)>0) radial_tmp(:) = temp(ishell,iph,ith,:)
          enddo
       enddo
       do ith=0,ores
          do iph=0,ores
             if (ncells(ishell,iph,ith)<1) radial(i,iph,ith,:) = radial_tmp(:)
          enddo
       enddo

       ncells_allsectors(i) = ncells_allsectors(ishell)
           !write(*,*) ishell,i, 'RADIAL PRESSURE: ', radial(i,0,0,6), temp(ishell,0,0,6)
           !write(*,*) ishell,i, 'RADIAL PRESSURE: ', radial(i,0,ores,6), temp(ishell,0,ores,6)
           !write(*,*) ishell,i, 'RADIAL PRESSURE: ', radial(i,ores,0,6), temp(ishell,ores,0,6)
           !write(*,*) ishell,i, 'RADIAL PRESSURE: ', radial(i,ores,ores,6), temp(ishell,ores,ores,6)
       i = i+1
    endif
  enddo

  !if(t_phys>500.0 .and. t_phys<510.0) then
  !do i=1,nshells_eff
  !  write(*,"('i = ',I3,' : r = ',F6.4,' : d = ',ES13.6,' , u = ',ES13.6,1x,ES13.6,1x,ES13.6,&
  !  ' , P = ',ES13.6,', ej = ',ES13.6,', g = ',ES13.6,' (',I6,' cells)')")&
  !  i,radial(i,0,0,0),radial(i,0,0,1),radial(i,0,0,2),radial(i,0,0,3),radial(i,0,0,4),radial(i,0,0,5), &
  !    radial(i,0,0,6),radial(i,0,0,7),ncells(i,0,0)
  !  write(*,"('i = ',I3,' : r = ',F6.4,' : d = ',ES13.6,' , u = ',ES13.6,1x,ES13.6,1x,ES13.6,&
  !  ' , P = ',ES13.6,', ej = ',ES13.6,', g = ',ES13.6,' (',I6,' cells)')")&
  !  i,radial(i,ores,ores,0),radial(i,ores,ores,1),radial(i,ores,ores,2),radial(i,ores,ores,3),radial(i,ores,ores,4), &
  !    radial(i,ores,ores,5),radial(i,ores,ores,6),radial(i,ores,ores,7),ncells(i,ores,ores)
  !enddo
  !endif
  deallocate(temp_loc)
  deallocate(temp)
  deallocate(ncells_loc)
  deallocate(ncells)

end subroutine average_radial_profile
!###########################################################
!###########################################################
!###########################################################
!###########################################################
subroutine diagnose_shocks(ilevel)
  use amr_commons
  use hydro_commons
  use Chevalier,only:SNR
  implicit none
  integer::ilevel

  integer ::i_CD(-1:+1)
  real(dp)::f_CD(-1:+1)
  ! integer ::i_CD(-1:+1)=(/0,0,0/)
  ! real(dp)::f_CD(-1:+1)=(/1,0,0/)
  integer::i,i_max,i1,i2,eps
  real(dp)::delta_i,delta_max,d1,d2,u1,u2,p1,p2,g1,g2,c1,tol_CD=1d-1
  integer::iph,ith
  
  call compute_cell_positions(ilevel)
  call average_radial_profile(ilevel)
  
  ! contact discontinuity position
  
  do ith=0,ores
     do iph=0,ores

        i_CD(:) = (/0,0,0/)
        f_CD(:) = (/1,0,0/)
        delta_max = 0
        !write(*,*) '********** RADIAL BOUNDS:    ------>'
        !write(*,*) 'lbound, ubound: ', lbound(radial,1),ubound(radial,1)
        do i=lbound(radial,1),ubound(radial,1)-1
          !write(*,*) i, iph, ith, '  pressure: ', radial(i+1,iph,ith,6), radial(i,iph,ith,6)
          delta_i = abs(radial(i+1,iph,ith,6) - radial(i,iph,ith,6))   ! pressure!
          if(delta_i>delta_max)then
            delta_max=delta_i
            i_CD(0) = i
          endif
        enddo
        !write(*,*) 'i_CD =', i_CD, ',   delta_max = ',delta_max
        shock(iph,ith,0)%x = (radial(i_CD(0),iph,ith,0)+radial(i_CD(0)+1,iph,ith,0))/2.

        !! shock(iph,ith,0)%x = (radial(i_CD(iph,ith,0),iph,ith,0)+radial(i_CD(iph,ith,0)+1,iph,ith,0))/2.
        !      if (t_phys>400.0) then
        !write(*,*)'i_min = ',lbound(radial,1),', r_min = ',radial(lbound(radial,1),iph,ith,0),' pc'
        !write(*,*)'i_CD  = ',i_CD(0)         ,', r_CD  = ',shock(iph,ith,0)%x*(code%x/user%x),' pc'
        !write(*,*)'i_max = ',ubound(radial,1),', r_max = ',radial(ubound(radial,1),iph,ith,0),' pc'
        !      endif        
        ! shocks

        do eps=-1,+1,2
           shock(iph,ith,eps)%t = t_phys
           i_CD(eps) = i_CD(0)
           delta_max = 0
           i = i_CD(0)
           i_max = i_CD(0)
           do while(i>lbound(radial,1).and.i<ubound(radial,1))
              delta_i = abs(radial(i+eps,iph,ith,5) - radial(i,iph,ith,5))  ! pressure
              !if (t_phys>400.0) then
              !write(*,*) 'eps, i, iph, ith;  gamma:  radial(i+eps,iph,ith,5), radial(i,iph,ith,5)'
              !write(*,*) eps, i, iph, ith,  radial(i+eps,iph,ith,5), radial(i,iph,ith,5)
              !write(*,*) 'delta_max = ',delta_max,',   delta_i = ', delta_i 
              !endif
              if(delta_i>delta_max)then
                 delta_max=delta_i
                 i_max=i
              endif
              if(i_CD(eps)==i_CD(0).and.abs(radial(i,iph,ith,6)-f_CD(eps))<tol_CD) i_CD(eps)=i
              i = i+eps
           enddo

           !if (t_phys>400.0) write(*,*) 'eps=',eps,', imax=', i_max,',  i=',i
           if (i_max<3) write(*,*) '*************************   LOWER LIMIT of i_max!!!', i_max, i
           shock(iph,ith,eps)%x = (radial(i_max,iph,ith,0)+radial(i_max+eps,iph,ith,0))/2. !!!
           i1 = i_max + eps*int(1.5+eps/2.)
           i2 = i_max
           if(eps>0)then 
              d1 = d_ISM
           else
              d1 = radial(i1,iph,ith,1)
           endif
           d2 = radial(i2,iph,ith,1)
           shock(iph,ith,eps)%n0 = d1/(cgs%mp/code%m)
           shock(iph,ith,eps)%r  = d2/d1
           i2 = i_max - eps
           u1 = sqrt(radial(i1,iph,ith,2)**2+radial(i1,iph,ith,3)**2+radial(i1,iph,ith,4)**2)
           u2 = sqrt(radial(i2,iph,ith,2)**2+radial(i2,iph,ith,3)**2+radial(i2,iph,ith,4)**2)
 
           !shock(iph,ith,eps)%u = (shock(iph,ith,eps)%r * u2 - u1) / (shock(iph,ith,eps)%r - 1.)
           !write(*,*)'u1 = ',u1*code%u/user%u,', u2 = ',u2*code%u/user%u,' -> uS = ',shock(iph,ith,eps)%u*code%u/user%u

           if(shock(iph,ith,eps)%t>shock_prec(iph,ith,eps)%t)then
              shock(iph,ith,eps)%u = (shock(iph,ith,eps)%x-shock_prec(iph,ith,eps)%x) / &
                                     (shock(iph,ith,eps)%t-shock_prec(iph,ith,eps)%t)
              if(eps<0)&
                 shock(iph,ith,eps)%u=shock(iph,ith,eps)%x/shock(iph,ith,eps)%t-shock(iph,ith,eps)%u  ! ejecta frame
              if((shock(iph,ith,eps)%u<=0).or.(shock(iph,ith,eps)%u>SNR(eps)%u_Sh/code%u).or. &
                 (shock(iph,ith,eps)%u>shock_prec(iph,ith,eps)%u.and.nstep>10)) &
                 shock(iph,ith,eps)%u=shock_prec(iph,ith,eps)%u
           else
              shock(iph,ith,eps)%u = shock_prec(iph,ith,eps)%u
           endif
           shock_prec(iph,ith,eps)%t=shock(iph,ith,eps)%t
           shock_prec(iph,ith,eps)%x=shock(iph,ith,eps)%x
           shock_prec(iph,ith,eps)%u=shock(iph,ith,eps)%u
           i1 = i_max + 3*eps !!! why 3eps?
           !write(*,*) 'i_max=', i_max, ' eps=', eps, ',  i1=', i1 ! to see what happens when omega != 2, but 1
           p1 = radial(i1,iph,ith,5)
           p2 = radial(i2,iph,ith,5)
#ifdef VAR_G
           g1 = radial(i1,iph,ith,VAR_G)
           g2 = radial(i2,iph,ith,VAR_G)
#else
           g1 = gamma
           g2 = gamma
#endif
           if(eps>0)then 
              c1 = sqrt(gamma*p_ISM/d_ISM)
              u1 = 0.
           else 
              c1 = sqrt(g1*p1/d1)
           endif
           shock(iph,ith,eps)%M = abs(shock(iph,ith,eps)%u-u1) / c1
          !write(*,*)'radial=',radial(i1,iph,ith,5), '::  d1 = ',d1*code%d/user%d,', P1 = ',p1*code%p/user%p,&
          !          ' -> c1 = ',c1*code%u/user%u,' km/s -> Ms = ',shock(iph,ith,eps)%M
        enddo  ! (eps=-1,+1,2)
        
        ! contact discontinuity spread
        shock(iph,ith,0)%x_min = radial(i_CD(-1),iph,ith,0)
        shock(iph,ith,0)%x_max = radial(i_CD(+1),iph,ith,0)
        !if(shock(iph,ith,0)%x_max<shock(iph,ith,0)%x)then
        !write(*,*)'CD   min: i = ',i_CD(-1),', r  = ',radial(i_CD(-1),iph,ith,0)*(code%x/user%x),' pc'
        !write(*,*)'CD  mean: i = ',i_CD( 0),', r  = ',shock(iph,ith,0)%x        *(code%x/user%x),' pc'
        !write(*,*)'CD   max: i = ',i_CD(+1),', r  = ',radial(i_CD(+1),iph,ith,0)*(code%x/user%x),' pc'
        !write(*,*)'CD delta: i = ',i_CD(+1)-i_CD(-1)+1,', r  = ',(radial(i_CD(+1),iph,ith,0)-radial(i_CD(-1),iph,ith,0))*(code%x/user%x),' pc'
        !endif

     enddo
  enddo
  if(myid==2) then
    if (shock(0,0,+1)%t>500.0 .and. shock(0,0,+1)%t<510.0) write(*,*) 'FS radii: ', shock(0,0,+1)%r, shock(ores,ores,+1)%r
  endif
  
end subroutine diagnose_shocks
!###########################################################
!###########################################################
!###########################################################
!###########################################################
subroutine accelerate_particles(ilevel)
  use amr_commons
  use hydro_commons
  use const
  use hydro_parameters
  use Chevalier, only:SNR
  use Blasi,only:Blasi_DSA,Blasi_IN=>IN,Blasi_OUT=>OUT,pi
  implicit none
  integer::ilevel
  
  ! internals
  integer::n_sol  ! number of solutions
  integer::eps    ! -1: reverse shock, 0: contact discontinuity, +1: forward shock
  logical::out(6:7)=(/.true.,.true./) ! whether to output to screen (6) and/or to disk (7)
  character(LEN=128)::filename='shocks.dat'
  integer::i
  logical,save::first_call=.true.
  integer::iph,ith
  
  ! diagnose shocks
  
  do i=6,7
    if(out(i).and.myid==1)then
      if(i==7)then
        if(first_call.and.nrestart==0)then
          open(unit=i,file=TRIM(outdir)//'/'//TRIM(filename),form='formatted',recl=1024,status='replace')
        else
          open(unit=i,file=TRIM(outdir)//'/'//TRIM(filename),form='formatted',recl=1024,position='append')
        endif
      endif
      if(i==6.or.(i==7.and.first_call.and.nrestart==0))write(i,*)&
         "  shock: radius  compression   velocity  Mach   ->  eta       p_inj    p_max    Pc/Ptot    r_sub  r_tot -> g_eff"
      if(i==7)write(i,*)t_phys
    endif
  enddo
  if(nstep>0) call diagnose_shocks(ilevel)
  
  ! accelerate particles
  
  do eps=-1,+1
    if(eps==0)then
       do i=6,7 
         if(out(i).and.myid==1) write(i,"(3x,I2,5x,F6.4,2x,F7.4,7x,F6.4,4x,F6.4)")&
            eps,shock(0,0,eps)%x*code%x/user%x,&
            (shock(0,0,eps)%x_max-shock(0,0,eps)%x_min)*code%x/user%x,&
            shock(0,0,eps)%x_min*code%x/user%x,&
            shock(0,0,eps)%x_max*code%x/user%x
       enddo
    else
       do i=6,7 
          if(out(i).and.myid==1) write(i,"(3x,SP,I2,S,5x,F8.4,2x,F7.4,7x,I6,3x,I7)",advance='no')&
              eps,shock(0,0,eps)%x*code%x/user%x,shock(0,0,eps)%r,int(shock(0,0,eps)%u*code%u/user%u),int(shock(0,0,eps)%M)
       enddo
      ! Blasi's model
      if(eps>0)then

         do ith=0,ores
            do iph=0,ores
        
               Blasi_IN%Ms0 = shock(iph,ith,eps)%M                                                       ! sonic Mach number
               Blasi_IN%u0  = shock(iph,ith,eps)%u*code%u                                                ! shock velocity
               Blasi_IN%n0  = shock(iph,ith,eps)%n0*code%n                                               ! upstream gas density
               Blasi_IN%B0  = shock(iph,ith,eps)%B0*code%B                                               ! upstream magnetic field
               Blasi_IN%P0  = (Blasi_IN%n0*cgs%mp/gamma)*(Blasi_IN%u0/Blasi_IN%Ms0)**2               ! upstream pressure
               Blasi_IN%T0  = (SNR(eps)%mu*cgs%mp)/(gamma*cgs%kB)*(Blasi_IN%u0/Blasi_IN%Ms0)**2      ! upstream temperature
               Blasi_IN%Ma0 = Blasi_IN%u0 * sqrt(4*pi*cgs%mp*Blasi_IN%n0) / Blasi_IN%B0              ! upstream Alfvenic Mach number
               if(E_max>=0) then     ! fixed maximum energy of protons
                  Blasi_IN%Emax_p = E_max * cgs%mp*cgs%c**2
                  Blasi_IN%tmax_p = 0
                  Blasi_IN%xmax_p = 0
               else                  ! automatic maximum energy of protons
                  Blasi_IN%Emax_p = 0
                  Blasi_IN%tmax_p = t_phys*code%t
                  Blasi_IN%xmax_p = x_frac * shock(iph,ith,eps)%x*code%x
               endif
               Blasi_IN%Emax_e = 0   ! maximum energy of electrons
               Blasi_IN%verbose = 0
              
               n_sol = Blasi_DSA()
               if(n_sol/=1)then
                  if (n_sol<1)write(*,*)"no solution found by Blasi's model"
                  if (n_sol>1)write(*,*)"multiple solutions found by Blasi's model"
                  call dump_all(.true.)
                  call clean_stop
               endif
              
               shock(iph,ith,eps)%eta   = Blasi_OUT(n_sol)%eta_p
               shock(iph,ith,eps)%p_inj = Blasi_OUT(n_sol)%pinj_p / (cgs%mp*cgs%c)
               shock(iph,ith,eps)%p_max = Blasi_OUT(n_sol)%pmax_p / (cgs%mp*cgs%c)
               shock(iph,ith,eps)%W_cr  = Blasi_OUT(n_sol)%Wcr
               shock(iph,ith,eps)%r_sub = Blasi_OUT(n_sol)%Rsub
               shock(iph,ith,eps)%r_tot = Blasi_OUT(n_sol)%Rtot
               shock(iph,ith,eps)%g_eff = (shock(iph,ith,eps)%M**2*(shock(iph,ith,eps)%r_tot+1)-2*shock(iph,ith,eps)%r_tot) &

                         / (shock(iph,ith,eps)%M**2*(shock(iph,ith,eps)%r_tot-1))
            enddo
         enddo

      endif
      
      do i=6,7
        if(out(i).and.myid==1) write(i,"('    ',ES9.2,1x,ES8.1,1x,ES8.1,1x,ES9.2,1x,F6.2,1x,F6.2,5x,F5.3)")&
           shock(0,0,eps)%eta,shock(0,0,eps)%p_inj,shock(0,0,eps)%p_max,shock(0,0,eps)%W_cr,&
           shock(0,0,eps)%r_sub,shock(0,0,eps)%r_tot,shock(0,0,eps)%g_eff
        if(out(i).and.myid==1) write(i,"(3x,SP,I2,S,5x,F8.4,2x,F7.4,7x,I6,3x,I7)",advance='no')&
           eps,shock(ores,ores,eps)%x*code%x/user%x,shock(ores,ores,eps)%r, &
           int(shock(ores,ores,eps)%u*code%u/user%u),int(shock(ores,ores,eps)%M)
        if(out(i).and.myid==1) write(i,"('    ',ES9.2,1x,ES8.1,1x,ES8.1,1x,ES9.2,1x,F6.2,1x,F6.2,5x,F5.3)")&
           shock(ores,ores,eps)%eta,shock(ores,ores,eps)%p_inj,shock(ores,ores,eps)%p_max,shock(ores,ores,eps)%W_cr,&
           shock(ores,ores,eps)%r_sub,shock(ores,ores,eps)%r_tot,shock(ores,ores,eps)%g_eff
      enddo
      if(eps==+1)then
          history(nstep)%tS = t_phys*code%t
          history(nstep)%rS = shock(0,0,eps)%x*code%x
          history(nstep)%M0 = Blasi_IN%Ms0
          history(nstep)%u0 = Blasi_IN%u0
          history(nstep)%T0 = Blasi_IN%T0
          history(nstep)%n0 = Blasi_IN%n0
          history(nstep)%B0 = Blasi_IN%B0
          if(do_backreact)then
            history(nstep)%T2 = Blasi_OUT(n_sol)%T2
            history(nstep)%n2 = Blasi_OUT(n_sol)%n2
            history(nstep)%B2 = Blasi_OUT(n_sol)%B2
          else
            history(nstep)%T2 = history(nstep)%T0 * (2*gamma*history(nstep)%M0**2 - (gamma-1)) &
                                                  * ((gamma-1)*history(nstep)%M0**2 + 2) &
                                                  / ((gamma+1)**2*history(nstep)%M0**2)
            history(nstep)%n2 = history(nstep)%n0 * (gamma+1)*history(nstep)%M0**2 &
                                                  / ((gamma-1)*history(nstep)%M0**2 + 2)
            history(nstep)%B2 = history(nstep)%B0
          endif
      endif

      do ith=0,ores
         do iph=0,ores
      
            if(shock(iph,ith,eps)%g_eff<=1..or.shock(iph,ith,eps)%g_eff>gamma*(1+1d-10))then
               if(myid==1)then
                  write(*,*)
                  if(shock(iph,ith,eps)%g_eff<=1.  )write(*,*)"! effective gamma <= 1"
                  if(shock(iph,ith,eps)%g_eff>gamma)write(*,*)"! effective gamma > ",gamma
               endif
               !call clean_stop
               shock(iph,ith,eps)=shock_prec(iph,ith,eps)
            endif
         enddo
      enddo
      
    endif
  enddo

  if(myid==1)then
    first_call = .false.
    if(out(7))close(7)
  endif
  
end subroutine accelerate_particles
!###########################################################
!###########################################################
!###########################################################
!###########################################################
subroutine back_react(ilevel)
  use amr_commons
  use hydro_commons
  use const

  implicit none
  integer::ilevel

  integer::i,ind,icell,iskip,n, eps=+1
  integer::igrid, ngrid, ncache
  real(dp)::dx,shock_half_width,delta_icell,g_eff_icell,B_eff_icell
  real(dp), dimension(0:ores,0:ores)::g_eff_icell_sct
  ! smoothing region for g_eff
  real(dp)::epsmth  = 0.1


  integer::ibound,boundary_dir,idim,inbor
  integer,dimension(1:nvector),save::ind_grid,ind_grid_ref
  integer,dimension(1:nvector),save::ind_cell,ind_cell_ref

  integer::iph,ith,oresfix
  real(dp)::trph1,trth1,trph2,trth2
  real(dp)::phpos,thpos


  oresfix = 2*ores - 1

  dx=0.5D0**ilevel*boxlen
  shock_half_width=2*dx
  
  n=0
  do ind=1,twotondim 
     iskip=ncoarse+(ind-1)*ngridmax
     do i=1,active(ilevel)%ngrid
        icell=active(ilevel)%igrid(i)+iskip
        !write(*,*) '*** i, icell: ', i, icell, active(ilevel)%igrid(i)

         do ith=0,ores
            do iph=0,ores

               trph1 = (1.0*iph)/(1.0*ores+1.0)*0.5*trpi
               trth1 = (1.0*ith)/(1.0*ores+1.0)*0.5*trpi
               trph2 = (1.0*iph+1.0)/(1.0*ores+1.0)*0.5*trpi
               trth2 = (1.0*ith+1.0)/(1.0*ores+1.0)*0.5*trpi

               phpos = position(icell,2)/sqrt(position(icell,1)**2 + position(icell,2)**2)
               thpos = position(icell,3)/position(icell,0)
               ! consider each sector separately
               if( (phpos>sin(trph1) .and. phpos<sin(trph2)) .and. &
                   (thpos>sin(trth1) .and. thpos<sin(trth2) )then

!                   (position(icell,3)/sqrt(position(icell,1)**2 + position(icell,2)**2 + position(icell,3)**2)>&
!                                         sin(trth1) .and. & 
!                    position(icell,3)/sqrt(position(icell,1)**2 + position(icell,2)**2 + position(icell,3)**2)<&
!                                         sin(trth2) )then

                  delta_icell = position(icell,0)-shock(iph,ith,eps)%x/a_t
                  if(delta_icell*eps>=0)then
#ifdef VAR_G
                     ! to get the proper compression of the fluid
                     g_eff_icell_sct(iph,ith) = gamma + (shock(iph,ith,eps)%g_eff-gamma)*exp(-0.5*delta_icell**2/shock_half_width**2)
                     uold(icell,VAR_G) = uold(icell,1) / (g_eff_icell_sct(iph,ith)-1.)   !!! applying g_eff to the scheme
                  
                     !if (shock(iph,ith,eps)%t>20.0) write(*,*) shock(iph,ith,eps)%t, eps, iph, ith, &
                     !     ':   RADIUS = ', position(icell,0), shock(iph,ith,eps)%x, ',   GAMMA = ', g_eff_icell
#endif


                     n=n+1
                  endif
               endif

            enddo
         enddo

! applying the smoothing of the gamma on the egde of the sector
         do ith=1,ores-1
            do iph=1,ores-1
               trph1 = (1.0*iph)/(1.0*ores+1.0)*0.5*trpi
               trth1 = (1.0*ith)/(1.0*ores+1.0)*0.5*trpi
               phpos = position(icell,2)/sqrt(position(icell,1)**2 + position(icell,2)**2)
               thpos = position(icell,3)/position(icell,0)
               if( (phpos>sin(trph1*(1.0-epsmth)) .and. phpos<sin(trph1))) then
                    g_eff_icell = g_eff_icel_sct(iph,ith)*((1.0-phpos)/epsmth) + &
                                  0.5*(g_eff_icel_sct(iph,ith)+g_eff_icel_sct(iph+1,ith))*(1.0+(phpos-1.0)/epsmth)
               if( (phpos>sin(trph1) .and. phpos<sin(trph1)*(1.0+epsmth))) then
                    g_eff_icell = 0.5*(g_eff_icel_sct(iph-1,ith)+g_eff_icel_sct(iph,ith))*(1.0-(phpos-1.0)/epsmth) + &
                                  g_eff_icel_sct(iph,ith)*((phpos-1.0)/epsmth)

               if( (thpos>sin(trth1*(1.0-epsmth)) .and. thpos<sin(trth1))) then
                    g_eff_icell = g_eff_icel_sct(iph,ith)*((1.0-thpos)/epsmth) + &
                                  0.5*(g_eff_icel_sct(iph,ith)+g_eff_icel_sct(iph,ith+1))*(1.0+(thpos-1.0)/epsmth)
               if( (thpos>sin(trth1) .and. thpos<sin(trth1)*(1.0+epsmth))) then
                    g_eff_icell = 0.5*(g_eff_icel_sct(iph,ith-1)+g_eff_icel_sct(iph,ith))*(1.0-(thpos-1.0)/epsmth) + &
                                  g_eff_icel_sct(iph,ith)*((thpos-1.0)/epsmth)
            enddo
         enddo

     end do
  end do
  !write(*,*)'  backreaction applied on ',n,'cells'

end subroutine back_react

!###########################################################
!###########################################################
!###########################################################
!###########################################################
subroutine save_wcr(x,dx,icell)
  use amr_parameters
  use amr_commons
  use hydro_parameters
  use hydro_commons
  use const
  implicit none
  integer ::icell                         ! Cell index 
  real(dp)::dx                            ! Cell size
  real(dp),dimension(1:ndim)::x           ! Cell center position.

  real(dp)::average_cell    ! averaging function
  integer::n_av=1           ! number of sub-cells for averaging (in each direction)
  interface
    function f_init(x,dx,ivar) ! function to average
      real*8::f_init
      real*8::dx
      real*8::x(1:3)
      integer::ivar
    end function
  end interface

  uold(icell,VAR_W) = uold(icell,1) * average_cell(f_init,VAR_W,x,dx,n_av) 

end subroutine save_wcr
